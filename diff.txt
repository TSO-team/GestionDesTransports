diff -ru STM32F407VGT6/Src/main.c "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/main.c"
--- STM32F407VGT6/Src/main.c	2020-11-11 15:26:01.325049000 -0500
+++ "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/main.c"	2020-12-14 00:33:00.000000000 -0500
@@ -37,13 +37,17 @@
 #include "piloteIOT2.h"
 #include "piloteIOT3.h"
 #include "piloteIOT4.h"
+#include "piloteUSART2.h"
 #include "serviceBaseDeTemps.h"
+#include "service_can.h"
 #include "interfaceT1.h"
 #include "interfaceT2.h"
 #include "interfaceT3.h"
 #include "interfaceT4.h"
-#include "processusClignotant.h"
-#include "processusBoutonConnecte.h"
+#include "interfaceESP.h"
+//#include "processusClignotant.h"
+//#include "processusBoutonConnecte.h"
+#include "processusGestionDesTransports.h"
     
 /* USER CODE END Includes */
 
@@ -64,8 +68,11 @@
 
 /* Private variables ---------------------------------------------------------*/
 CAN_HandleTypeDef hcan1;
+
 TIM_HandleTypeDef htim6;
 
+UART_HandleTypeDef huart2;
+
 /* USER CODE BEGIN PV */
 /* Private variables ---------------------------------------------------------*/
 
@@ -74,6 +81,7 @@
 /* Private function prototypes -----------------------------------------------*/
 void SystemClock_Config(void);
 static void MX_GPIO_Init(void);
+static void MX_USART2_UART_Init(void);
 static void MX_TIM6_Init(void);
 static void MX_CAN1_Init(void);
 /* USER CODE BEGIN PFP */
@@ -84,19 +92,24 @@
 
 /* Private user code ---------------------------------------------------------*/
 /* USER CODE BEGIN 0 */
-void main_initialiseAvantLeHAL(void) {
+void main_initialiseAvantLeHAL(void) 
+{
+  piloteUSART2_initialise();
   piloteTimer6Up_initialise();
   piloteIOT1_initialise();
   piloteIOT2_initialise();
   piloteIOT3_initialise();
   piloteIOT4_initialise();
+  service_can_init();
   serviceBaseDeTemps_initialise();
   interfaceT1_initialise();
   interfaceT2_initialise();
   interfaceT3_initialise();
   interfaceT4_initialise();
-  processusClignotant_initialise();
-  processusBoutonConnecte_initialise();
+  interfaceESP_initialise();
+  //processusClignotant_initialise();
+  //processusBoutonConnecte_initialise();
+  processusGestionDesTransports_initialise();
 }
 
 void main_initialiseApresLeHAL(void) {
@@ -111,11 +124,11 @@
   * @brief  The application entry point.
   * @retval int
   */
-int main(void) {
+int main(void)
+{
   /* USER CODE BEGIN 1 */
   main_initialiseAvantLeHAL();
   /* USER CODE END 1 */
-  
 
   /* MCU Configuration--------------------------------------------------------*/
 
@@ -135,6 +148,7 @@
 
   /* Initialize all configured peripherals */
   MX_GPIO_Init();
+  MX_USART2_UART_Init();
   MX_TIM6_Init();
   MX_CAN1_Init();
   /* USER CODE BEGIN 2 */
@@ -157,15 +171,16 @@
   * @brief System Clock Configuration
   * @retval None
   */
-void SystemClock_Config(void) {
+void SystemClock_Config(void)
+{
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 
-  /** Configure the main internal regulator output voltage 
+  /** Configure the main internal regulator output voltage
   */
   __HAL_RCC_PWR_CLK_ENABLE();
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
-  /** Initializes the CPU, AHB and APB busses clocks 
+  /** Initializes the CPU, AHB and APB busses clocks
   */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
@@ -175,10 +190,11 @@
   RCC_OscInitStruct.PLL.PLLN = 168;
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   RCC_OscInitStruct.PLL.PLLQ = 7;
-  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
+  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
+  {
     Error_Handler();
   }
-  /** Initializes the CPU, AHB and APB busses clocks 
+  /** Initializes the CPU, AHB and APB busses clocks
   */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
@@ -187,7 +203,8 @@
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 
-  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
+  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
+  {
     Error_Handler();
   }
 }
@@ -197,7 +214,9 @@
   * @param None
   * @retval None
   */
-static void MX_CAN1_Init(void) {
+static void MX_CAN1_Init(void)
+{
+
   /* USER CODE BEGIN CAN1_Init 0 */
 
   /* USER CODE END CAN1_Init 0 */
@@ -207,8 +226,7 @@
   /* USER CODE END CAN1_Init 1 */
   hcan1.Instance = CAN1;
   hcan1.Init.Prescaler = 168;
-  //hcan1.Init.Mode = CAN_MODE_LOOPBACK;
-  hcan1.Init.Mode = CAN_MODE_NORMAL;
+  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
@@ -218,12 +236,14 @@
   hcan1.Init.AutoRetransmission = DISABLE;
   hcan1.Init.ReceiveFifoLocked = DISABLE;
   hcan1.Init.TransmitFifoPriority = DISABLE;
-  if (HAL_CAN_Init(&hcan1) != HAL_OK) {
+  if (HAL_CAN_Init(&hcan1) != HAL_OK)
+  {
     Error_Handler();
   }
   /* USER CODE BEGIN CAN1_Init 2 */
 
   /* USER CODE END CAN1_Init 2 */
+
 }
 
 /**
@@ -231,7 +251,9 @@
   * @param None
   * @retval None
   */
-static void MX_TIM6_Init(void) {
+static void MX_TIM6_Init(void)
+{
+
   /* USER CODE BEGIN TIM6_Init 0 */
 
   /* USER CODE END TIM6_Init 0 */
@@ -246,17 +268,53 @@
   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
   htim6.Init.Period = PILOTETIMER6UP_COMPTE_MAXIMAL;
   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
-  if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
+  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
+  {
     Error_Handler();
   }
   sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
-  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
+  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
+  {
     Error_Handler();
   }
   /* USER CODE BEGIN TIM6_Init 2 */
 
   /* USER CODE END TIM6_Init 2 */
+
+}
+
+/**
+  * @brief USART2 Initialization Function
+  * @param None
+  * @retval None
+  */
+static void MX_USART2_UART_Init(void)
+{
+
+  /* USER CODE BEGIN USART2_Init 0 */
+
+  /* USER CODE END USART2_Init 0 */
+
+  /* USER CODE BEGIN USART2_Init 1 */
+
+  /* USER CODE END USART2_Init 1 */
+  huart2.Instance = USART2;
+  huart2.Init.BaudRate = 19200;
+  huart2.Init.WordLength = UART_WORDLENGTH_8B;
+  huart2.Init.StopBits = UART_STOPBITS_1;
+  huart2.Init.Parity = UART_PARITY_NONE;
+  huart2.Init.Mode = UART_MODE_TX_RX;
+  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
+  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
+  if (HAL_UART_Init(&huart2) != HAL_OK)
+  {
+    Error_Handler();
+  }
+  /* USER CODE BEGIN USART2_Init 2 */
+
+  /* USER CODE END USART2_Init 2 */
+
 }
 
 /**
@@ -264,7 +322,8 @@
   * @param None
   * @retval None
   */
-static void MX_GPIO_Init(void) {
+static void MX_GPIO_Init(void)
+{
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 
   /* GPIO Ports Clock Enable */
@@ -282,7 +341,7 @@
   HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 
   /*Configure GPIO pin Output Level */
-  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
+  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                           |Audio_RST_Pin, GPIO_PIN_RESET);
 
   /*Configure GPIO pin : CS_I2C_SPI_Pin */
@@ -343,9 +402,9 @@
   GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 
-  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
+  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                            Audio_RST_Pin */
-  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
+  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                           |Audio_RST_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
   GPIO_InitStruct.Pull = GPIO_NOPULL;
@@ -393,6 +452,7 @@
   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
   GPIO_InitStruct.Pull = GPIO_NOPULL;
   HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
+
 }
 
 /* USER CODE BEGIN 4 */
@@ -403,7 +463,8 @@
   * @brief  This function is executed in case of error occurrence.
   * @retval None
   */
-void Error_Handler(void) {
+void Error_Handler(void)
+{
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   while(1) {}
@@ -418,7 +479,8 @@
   * @param  line: assert_param error line source number
   * @retval None
   */
-void assert_failed(uint8_t *file, uint32_t line) {
+void assert_failed(uint8_t *file, uint32_t line)
+{
   /* USER CODE BEGIN 6 */
   /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
diff -ru STM32F407VGT6/Src/piloteCAN1.c "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/piloteCAN1.c"
--- STM32F407VGT6/Src/piloteCAN1.c	2020-11-11 15:26:01.325049000 -0500
+++ "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/piloteCAN1.c"2020-12-14 00:33:00.000000000 -0500
@@ -1,75 +1,81 @@
-// piloteCAN1:
-#include "main.h"
-#include "piloteCAN1.h"
-
-extern CAN_HandleTypeDef hcan1; // Defini par le HAL dans main.
-
-CAN_RxHeaderTypeDef piloteCAN1_reception;
-CAN_TxHeaderTypeDef piloteCAN1_transmission;
-CAN_FilterTypeDef piloteCAN1_filtre;
-unsigned int piloteCAN1_CasierPostal;
-
-unsigned int piloteCAN1_messageDisponible(void) {
-  return HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_FILTER_FIFO0);  
-}
-
-unsigned int piloteCAN1_messageTransmis(void) {
-  return HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
-}
-
-unsigned char piloteCAN1_litUnMessageRecu(unsigned char *DonneesRecues) {
-  if (HAL_CAN_GetRxMessage(&hcan1, 
-                           CAN_FILTER_FIFO0,
-                           &piloteCAN1_reception, 
-                           DonneesRecues) != HAL_OK) {
-                             
-    return PILOTECAN1_PAS_DISPONIBLE;
-  } else {
-    return PILOTECAN1_DISPONIBLE;
-  }
-}
-
-unsigned int piloteCAN1_transmetDesDonnes(unsigned int Identification11Bits,
-                                          unsigned char *Donnees,
-                                          unsigned char Nombre) {
-                                            
-  piloteCAN1_transmission.StdId = Identification11Bits;
-  piloteCAN1_transmission.DLC = Nombre;
-  
-  if (HAL_CAN_AddTxMessage(&hcan1, 
-                           &piloteCAN1_transmission,
-                           Donnees, 
-                           &piloteCAN1_CasierPostal) != HAL_OK) {
-                             
-    return PILOTECAN1_PAS_TRANSMIS;
-  } else {
-    return PILOTECAN1_TRANSMIS;
-  }
-}
-
-unsigned int piloteCAN1_initialise(void) {
-  piloteCAN1_transmission.ExtId = 0;
-  piloteCAN1_transmission.IDE = CAN_ID_STD;
-  piloteCAN1_transmission.RTR = CAN_RTR_DATA;
-  piloteCAN1_transmission.TransmitGlobalTime = DISABLE;
-  
-  piloteCAN1_filtre.FilterIdHigh = PILOTECAN1_IDENTIFICATION_EN_RECEPTION;
-  piloteCAN1_filtre.FilterIdLow = 0xFF;
-  piloteCAN1_filtre.FilterMaskIdHigh = PILOTECAN1_MASQUE_11_BITS_EN_RECEPTION;
-  piloteCAN1_filtre.FilterMaskIdLow = 0xFF;
-  piloteCAN1_filtre.FilterFIFOAssignment = CAN_FILTER_FIFO0;
-  piloteCAN1_filtre.FilterBank = 13;
-  piloteCAN1_filtre.FilterMode = CAN_FILTERMODE_IDMASK;
-  piloteCAN1_filtre.FilterScale = CAN_FILTERSCALE_32BIT;
-  piloteCAN1_filtre.FilterActivation = ENABLE;
-
-  if (HAL_CAN_ConfigFilter(&hcan1, &piloteCAN1_filtre) != HAL_OK) {
-    return PILOTECAN1_ERREUR;
-  }
-
-  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
-    return PILOTECAN1_ERREUR;
-  } else {
-    return PILOTECAN1_PAS_D_ERREUR;
-  }
-}
+//piloteCAN1:
+//Historique: 
+// 2018-11-12, Yves Roy, creation
+// 2020-11-19, Samuel Duclos, Aye Claude, Alex Vezina, modifications (copy paste from a repo online)
+
+#include "piloteCAN1.h"
+#include "main.h"
+
+extern CAN_HandleTypeDef hcan1; // Defini par le HAL dans main.
+
+CAN_RxHeaderTypeDef piloteCAN1_reception;
+CAN_TxHeaderTypeDef piloteCAN1_transmission;
+CAN_FilterTypeDef piloteCAN1_filtre;
+unsigned int piloteCAN1_CasierPostal;
+
+unsigned int piloteCAN1_initialise(void) {
+    piloteCAN1_transmission.ExtId = 0;
+    piloteCAN1_transmission.IDE = CAN_ID_STD;
+    piloteCAN1_transmission.RTR = CAN_RTR_DATA;
+    piloteCAN1_transmission.TransmitGlobalTime = DISABLE;
+    
+    piloteCAN1_filtre.FilterIdHigh = PILOTECAN1_IDENTIFICATION_EN_RECEPTION;
+    piloteCAN1_filtre.FilterIdLow = 0x0;
+    piloteCAN1_filtre.FilterMaskIdHigh = PILOTECAN1_MASQUE_11_BITS_EN_RECEPTION;
+    piloteCAN1_filtre.FilterMaskIdLow = 0x0;
+    piloteCAN1_filtre.FilterBank = 0;
+    piloteCAN1_filtre.FilterFIFOAssignment = CAN_FILTER_FIFO0;
+    piloteCAN1_filtre.FilterMode = CAN_FILTERMODE_IDMASK;
+    piloteCAN1_filtre.FilterScale = CAN_FILTERSCALE_32BIT;
+    piloteCAN1_filtre.FilterActivation = ENABLE;
+    
+    if (HAL_CAN_ConfigFilter(&hcan1, &piloteCAN1_filtre) != HAL_OK) {
+      return PILOTECAN1_ERREUR;
+    }
+
+    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
+        return PILOTECAN1_ERREUR;
+    }
+    else {
+        return PILOTECAN1_PAS_D_ERREUR;
+    }
+}
+
+unsigned int piloteCAN1_messageDisponible(void) {
+    return HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_FILTER_FIFO0);  
+}
+
+unsigned int piloteCAN1_messageTransmis(void) {
+    return HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
+}
+
+unsigned char piloteCAN1_litUnMessageRecu(unsigned char* DonneesRecues, unsigned char* callerId) {
+    if (HAL_CAN_GetRxMessage(&hcan1, 
+                             CAN_FILTER_FIFO0,
+                             &piloteCAN1_reception,
+                             DonneesRecues) != HAL_OK) {
+        return PILOTECAN1_PAS_DISPONIBLE;
+    }
+    else {
+        // set the id so we can know who sent data
+        *callerId = piloteCAN1_reception.StdId;
+        return PILOTECAN1_DISPONIBLE;
+    }
+}
+
+unsigned int piloteCAN1_transmetDesDonnes(unsigned int Identification11Bits,
+                                          unsigned char *Donnees,
+                                          unsigned char Nombre) {
+  piloteCAN1_transmission.StdId = Identification11Bits;
+  piloteCAN1_transmission.DLC = Nombre;
+  
+  if (HAL_CAN_AddTxMessage(&hcan1, 
+                           &piloteCAN1_transmission,
+                           Donnees, 
+                           &piloteCAN1_CasierPostal) != HAL_OK) {
+                             
+    return PILOTECAN1_PAS_TRANSMIS;
+  } else {
+    return PILOTECAN1_TRANSMIS;
+  }
+}
diff -ru STM32F407VGT6/Src/piloteCAN1.h "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/piloteCAN1.h"
--- STM32F407VGT6/Src/piloteCAN1.h	2020-11-11 15:26:01.325049000 -0500
+++ "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/piloteCAN1.h"2020-12-14 00:33:00.000000000 -0500
@@ -1,21 +1,42 @@
-#ifndef PILOTECAN1_H
-  #define PILOTECAN1_H
-  // DESCRIPTION: pour utiliser le CAN1.
-  // Copiez et adaptez ce qui suit dans "main.h".
-  // #define PILOTECAN1_IDENTIFICATION_EN_TRANSMISSION  0x245
-  // #define PILOTECAN1_IDENTIFICATION_EN_RECEPTION  0x247
-  // #define PILOTECAN1_MASQUE_11_BITS_EN_RECEPTION  0x244
-  
-  #define PILOTECAN1_DISPONIBLE  1
-  #define PILOTECAN1_PAS_DISPONIBLE 0
-  #define PILOTECAN1_TRANSMIS 0
-  #define PILOTECAN1_PAS_TRANSMIS 1
-  #define PILOTECAN1_ERREUR 1
-  #define PILOTECAN1_PAS_D_ERREUR 0
-  
-  unsigned int piloteCAN1_messageDisponible(void);
-  unsigned int piloteCAN1_messageTransmis(void);
-  unsigned char piloteCAN1_litUnMessageRecu(unsigned char *);
-  unsigned int piloteCAN1_transmetDesDonnes(unsigned int, unsigned char *, unsigned char);
-  unsigned int piloteCAN1_initialise(void);
-#endif
+#ifndef PILOTECAN1_H
+#define PILOTECAN1_H
+
+//MODULE: piloteCAN1
+//DESCRIPTION: pour utiliser le CAN1
+//HISTORIQUE:
+// 2018-11-12, Yves Roy, creation
+
+//DEFINITIONS REQUISES PAR LE MODULE:
+//Dependances materielle
+//pas de d�pendances mat�rielles
+
+//Dependances logicielles
+//(copiez et adaptez ce qui suit dans "main.h")
+//#define PILOTECAN1_IDENTIFICATION_EN_TRANSMISSION  0x245
+//#define PILOTECAN1_IDENTIFICATION_EN_RECEPTION  0x247
+//#define PILOTECAN1_MASQUE_11_BITS_EN_RECEPTION  0x244
+//pas de d�pendances logicielles
+
+//INFORMATION PUBLIQUE:
+//Definitions publiques:
+#define PILOTECAN1_DISPONIBLE 1
+#define PILOTECAN1_PAS_DISPONIBLE 0
+#define PILOTECAN1_TRANSMIS 0
+#define PILOTECAN1_PAS_TRANSMIS 1
+#define PILOTECAN1_ERREUR 1
+#define PILOTECAN1_PAS_D_ERREUR 0
+
+//Fonctions publiques:
+unsigned int piloteCAN1_messageDisponible(void);
+unsigned int piloteCAN1_messageTransmis(void);
+unsigned char piloteCAN1_litUnMessageRecu(unsigned char* DonneesRecues,
+                                          unsigned char* callerId);
+unsigned int piloteCAN1_transmetDesDonnes(unsigned int Identification11Bits,
+                                          unsigned char *Donnees,
+                                          unsigned char Nombre);
+unsigned int piloteCAN1_initialise(void);
+
+//Variables publiques:
+//pas de variables publiques
+
+#endif
Only in Unité de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unité de Gestion des Transports (STM)/Src/: piloteUSART2.c
Only in Unité de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unité de Gestion des Transports (STM)/Src/: piloteUSART2.h
Only in STM32F407VGT6/Src/: processusBoutonConnecte.c
Only in STM32F407VGT6/Src/: processusBoutonConnecte.h
Only in STM32F407VGT6/Src/: processusClignotant.c
Only in STM32F407VGT6/Src/: processusClignotant.h
Only in Unité de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unité de Gestion des Transports (STM)/Src/: processusGestionDesTransports.c
Only in Unité de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unité de Gestion des Transports (STM)/Src/: processusGestionDesTransports.h
diff -ru STM32F407VGT6/Src/serviceBaseDeTemps.c "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/serviceBaseDeTemps.c"
--- STM32F407VGT6/Src/serviceBaseDeTemps.c	2020-11-11 15:26:01.325049000 -0500
+++ "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/serviceBaseDeTemps.c"	2020-12-14 00:33:00.000000000 -0500
@@ -3,18 +3,37 @@
 #include "piloteTimer6Up.h"
 #include "serviceBaseDeTemps.h"
 
-void serviceBaseDeTemps_gere(void) {
-  for (unsigned char i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++) {
+
+//Definitions privees
+//pas de definitions privees
+
+//Declarations de fonctions privees:
+void serviceBaseDeTemps_gere(void);
+//int Processus_Phase =0;
+
+//Definitions de variables privees:
+//pas de variables privees
+
+//Definitions de fonctions privees:
+void serviceBaseDeTemps_gere(void)
+{
+unsigned char i;
+  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
+  {
     serviceBaseDeTemps_execute[i]();
   }
 }
-
+    
+//Definitions de variables publiques:
 void (*serviceBaseDeTemps_execute[SERVICEBASEDETEMPS_NOMBRE_DE_PHASES])(void);
 
-void serviceBaseDeTemps_initialise(void) {
-  for (unsigned char i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++) {
+//Definitions de fonctions publiques:
+void serviceBaseDeTemps_initialise(void)
+{
+unsigned char i;
+  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
+  {
     serviceBaseDeTemps_execute[i] = neFaitRien;
   }
-  
   piloteTimer6Up_execute = serviceBaseDeTemps_gere;
 }
diff -ru STM32F407VGT6/Src/serviceBaseDeTemps.h "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/serviceBaseDeTemps.h"
--- STM32F407VGT6/Src/serviceBaseDeTemps.h	2020-11-11 15:26:01.325049000 -0500
+++ "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/serviceBaseDeTemps.h"	2020-12-14 00:33:00.000000000 -0500
@@ -7,6 +7,8 @@
      
   // Copiez et adaptez ce qui suit dans "main.h".
   // #define SERVICEBASEDETEMPS_NOMBRE_DE_PHASES 3
+
+  #include "main.h"
   
   void serviceBaseDeTemps_initialise(void);
   void serviceBaseDeTemps_gere(void);
Only in Unité de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unité de Gestion des Transports (STM)/Src/: service_can.c
Only in Unité de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unité de Gestion des Transports (STM)/Src/: service_can.h
Only in Unité de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unité de Gestion des Transports (STM)/Src/: serviceProtocole637.c
Only in Unité de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unité de Gestion des Transports (STM)/Src/: serviceProtocole637.h
diff -ru STM32F407VGT6/Src/stm32f4xx_hal_msp.c "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/stm32f4xx_hal_msp.c"
--- STM32F407VGT6/Src/stm32f4xx_hal_msp.c	2020-11-11 15:26:01.325049000 -0500
+++ "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/stm32f4xx_hal_msp.c"	2020-12-14 00:33:00.000000000 -0500
@@ -95,11 +95,11 @@
   /* USER CODE END CAN1_MspInit 0 */
     /* Peripheral clock enable */
     __HAL_RCC_CAN1_CLK_ENABLE();
-  
+
     __HAL_RCC_GPIOD_CLK_ENABLE();
-    /**CAN1 GPIO Configuration    
+    /**CAN1 GPIO Configuration
     PD0     ------> CAN1_RX
-    PD1     ------> CAN1_TX 
+    PD1     ------> CAN1_TX
     */
     GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
@@ -130,10 +130,10 @@
   /* USER CODE END CAN1_MspDeInit 0 */
     /* Peripheral clock disable */
     __HAL_RCC_CAN1_CLK_DISABLE();
-  
-    /**CAN1 GPIO Configuration    
+
+    /**CAN1 GPIO Configuration
     PD0     ------> CAN1_RX
-    PD1     ------> CAN1_TX 
+    PD1     ------> CAN1_TX
     */
     HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 
@@ -210,11 +210,11 @@
   /* USER CODE END USART2_MspInit 0 */
     /* Peripheral clock enable */
     __HAL_RCC_USART2_CLK_ENABLE();
-  
+
     __HAL_RCC_GPIOA_CLK_ENABLE();
-    /**USART2 GPIO Configuration    
+    /**USART2 GPIO Configuration
     PA2     ------> USART2_TX
-    PA3     ------> USART2_RX 
+    PA3     ------> USART2_RX
     */
     GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
@@ -245,10 +245,10 @@
   /* USER CODE END USART2_MspDeInit 0 */
     /* Peripheral clock disable */
     __HAL_RCC_USART2_CLK_DISABLE();
-  
-    /**USART2 GPIO Configuration    
+
+    /**USART2 GPIO Configuration
     PA2     ------> USART2_TX
-    PA3     ------> USART2_RX 
+    PA3     ------> USART2_RX
     */
     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 
diff -ru STM32F407VGT6/Src/stm32f4xx_it.c "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/stm32f4xx_it.c"
--- STM32F407VGT6/Src/stm32f4xx_it.c	2020-11-11 15:26:01.325049000 -0500
+++ "Unit\303\251 de Gestion des Transports & Tour de communication - Philippe Lemoine/Programmes Unit\303\251 de Gestion des Transports (STM)/Src/stm32f4xx_it.c"	2020-12-14 00:33:00.000000000 -0500
@@ -62,7 +62,7 @@
 /* USER CODE END EV */
 
 /******************************************************************************/
-/*           Cortex-M4 Processor Interruption and Exception Handlers          */ 
+/*           Cortex-M4 Processor Interruption and Exception Handlers          */
 /******************************************************************************/
 /**